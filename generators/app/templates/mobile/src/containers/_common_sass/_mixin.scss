$prefix-for-webkit: true !default;
$prefix-for-mozilla: true !default;
$prefix-for-microsoft: false !default;
$prefix-for-opera: false !default;
$prefix-for-spec: true !default; // required for keyframe mixin

@mixin radiusImg($rectWidth: 50px, $left: 0, $top: 0){
	width: $rectWidth;
	height: $rectWidth;
	border-radius: 50%;
	position: absolute;
	left: $left;
	top: $top;
}

@mixin button($height: 26px, $block:block, $color: #ffffff, $backgroundColor: #23c8bc, $padding: 0 20px) {
	height: $height;
	line-height: $height;
	display: $block;
	text-align: center;
	color: $color;
	border-radius: 4px;
	padding: $padding;
    background: $backgroundColor;
	cursor: pointer;
}

@mixin lineGradientBg($rotate,$from,$to){
	background: linear-gradient($rotate, $from, $to);
}

@mixin arrows ($arrow_color:#ccc, $arrow_size:1.0, $arrow_direction:45deg ) {
	position: absolute; padding-right: 15px; width: 100%; box-sizing: border-box;top: 20px;
	&::after {
		position: absolute;
		right: 10px;
		top: 50%;
		display: block;
		content: '';
		width: 10px;
		height: 10px;
		border-left: 2px solid $arrow_color;
		border-bottom: 2px solid $arrow_color;
		-webkit-transform: translateY(-50%) scale($arrow_size) rotateZ($arrow_direction);
		-moz-transform: translateY(-50%) scale($arrow_size) rotateZ($arrow_direction);
		-ms-transform: translateY(-50%) scale($arrow_size) rotateZ($arrow_direction)
	}
}

@mixin checkbox ($hook_width:18px, $hook_height:10px, $hook_border_width:2px, $hook_border_color:#FFF, $box_width:28px, $box_height:28px, $box_radius:28px, $box_border_width:2px, $box_border_color:lightgreen, $box_background_color:lightgreen ) {
	width:$box_width;height: $box_height;display: inline-block;border: 0;background: transparent;cursor: pointer;-webkit-appearance:none;box-sizing:border-box;
	&::before{
		box-sizing:border-box;display: table;width:100%;height: 100%; content: ' '; -webkit-transition:background-color 20ms ease-in-out; transition:background-color 20ms ease-in-out;
		background: #FFF;
		border:{
			color:$box_border_color;
			width:$box_border_width;
			style:solid;
			radius:$box_radius;
		}
	}
	&::after{
		box-sizing:border-box;
		-webkit-transition: opacity 0.05s ease-in-out;
		transition: opacity 0.05s ease-in-out;
		-webkit-transform: rotate(-50deg);
		transform: rotate(-50deg);
		position: absolute;
		top: 10%;
		left: 18%;
		display: table;
		width: $hook_width;
		height: $hook_height;
		border: $hook_border_width solid $hook_border_color;
		border-top: 0;
		border-right: 0;
		content: ' ';
		opacity: 0;
	}
}

@mixin caret ($position, $caret-width, $border-width, $direction, $border-color, $background-color) {
	position: $position;
	&:before, &:after{
		content: " ";
		position: absolute;
	}
	@if $direction == top {
		&:before {
			top:0;
			left: 0;
			border-bottom: $caret-width solid $border-color;
			border-left: $caret-width solid transparent;
			border-right: $caret-width solid transparent;
		}
		&:after {
			left: $border-width;
			top: $border-width;
			border-bottom: ($caret-width - $border-width) solid $background-color;
			border-left: ($caret-width - $border-width) solid transparent;
			border-right: ($caret-width - $border-width) solid transparent;
		}
	}
	@else if $direction == right {
		&:before {
			top:0;
			left: 0;
			border-left: $caret-width solid $border-color;
			border-top: $caret-width solid transparent;
			border-bottom: $caret-width solid transparent;
		}
		&:after {
			left: 0;
			top: $border-width;
			border-left: ($caret-width - $border-width) solid $background-color;
			border-top: ($caret-width - $border-width) solid transparent;
			border-bottom: ($caret-width - $border-width) solid transparent;
		}
	}
	@else if $direction == bottom {
		&:before {
			top:0;
			left: 0;
			border-top: $caret-width solid $border-color;
			border-left: $caret-width solid transparent;
			border-right: $caret-width solid transparent;
		}
		&:after {
			left: $border-width;
			top: 0;
			border-top: ($caret-width - $border-width) solid $background-color;
			border-left: ($caret-width - $border-width) solid transparent;
			border-right: ($caret-width - $border-width) solid transparent;
		}
	}
	@else if $direction == left {
		&:before {
			top:0;
			left: 0;
			border-right: $caret-width solid $border-color;
			border-top: $caret-width solid transparent;
			border-bottom: $caret-width solid transparent;
		}
		&:after {
			left: $border-width;
			top: $border-width;
			border-right: ($caret-width - $border-width) solid $background-color;
			border-top: ($caret-width - $border-width) solid transparent;
			border-bottom: ($caret-width - $border-width) solid transparent;
		}
	}
}

@mixin moreline-ellipsis($lineHeight: 20px, $lines: 2, $r: 255, $g: 255, $b: 255, $endColor: rgba(255,255,255,1)) {
	position:relative;
	line-height: $lineHeight;
	height: $lineHeight * $lines;
	overflow:hidden;
	&::after{
		content:"";
		font-weight:bold;
		position:absolute;
		background: linear-gradient(to right, rgba($r, $g, $b, 0), $endColor 90%);
		width: 40%;
		height: $lineHeight;
		bottom:0;
		right: 0;
	}
}

@mixin singleline-ellipsis($substract:0){
	overflow: hidden;
	text-overflow: ellipsis;
	white-space: nowrap;
	width: 100% - $substract;
}

@mixin disable-prefix-for-all() {
	$prefix-for-webkit:    false !global;
	$prefix-for-mozilla:   false !global;
	$prefix-for-microsoft: false !global;
	$prefix-for-opera:     false !global;
	$prefix-for-spec:      false !global;
}

@mixin keyframes($name) {
	$original-prefix-for-webkit:    $prefix-for-webkit;
	$original-prefix-for-mozilla:   $prefix-for-mozilla;
	$original-prefix-for-microsoft: $prefix-for-microsoft;
	$original-prefix-for-opera:     $prefix-for-opera;
	$original-prefix-for-spec:      $prefix-for-spec;

	@if $original-prefix-for-webkit {
		@include disable-prefix-for-all();
		$prefix-for-webkit: true !global;
		@-webkit-keyframes #{$name} {
			@content;
		}
	}

	@if $original-prefix-for-mozilla {
		@include disable-prefix-for-all();
		$prefix-for-mozilla: true !global;
		@-moz-keyframes #{$name} {
			@content;
		}
	}

	$prefix-for-webkit:    $original-prefix-for-webkit    !global;
	$prefix-for-mozilla:   $original-prefix-for-mozilla   !global;
	$prefix-for-microsoft: $original-prefix-for-microsoft !global;
	$prefix-for-opera:     $original-prefix-for-opera     !global;
	$prefix-for-spec:      $original-prefix-for-spec      !global;

	@if $original-prefix-for-spec {
		@keyframes #{$name} {
			@content;
		}
	}
}
//prefixer
@mixin prefixer ($property, $value, $prefixes) {
	@each $prefix in $prefixes {

		@if $prefix == webkit and $prefix-for-webkit == true {
			-webkit-#{$property}: $value;
		}
		@else if $prefix == moz and $prefix-for-mozilla == true {
			-moz-#{$property}: $value;
		}
		@else if $prefix == ms and $prefix-for-microsoft == true {
			-ms-#{$property}: $value;
		}
		@else if $prefix == o and $prefix-for-opera == true {
			-o-#{$property}: $value;
		}
		@else if $prefix == spec and $prefix-for-spec == true {
			#{$property}: $value;
		}
		@else {
			@warn "Unrecognized prefix: #{$prefix}";
		}
	}
}

@mixin transform($property: none) {
	// none | <transform-function>
	@include prefixer(transform, $property, webkit moz ms o spec);
}

@mixin transform-origin($axes: 50%) {
	// x-axis - left | center | right  | length | %
	// y-axis - top  | center | bottom | length | %
	// z-axis -                          length
	@include prefixer(transform-origin, $axes, webkit moz ms o spec);
}

@mixin transform-style($style: flat) {
	@include prefixer(transform-style, $style, webkit moz ms o spec);
}


%overflow-touch{
	overflow-x: hidden;overflow-y:scroll;-webkit-overflow-scrolling:touch;
}
%singleline-ellipsis {
	@include singleline-ellipsis;
}

%clearfix{
    zoom: 1;
    &:after{
        content: '';
        display: block;
        clear: both;
    }
}
.clearfix{
	zoom: 1;
	&:after{
		content: '';
		display: block;
		clear: both;
	}
}

@function px2rem($px){
	$rem : 50px;
	@return ($px/2/$rem) + rem;
}